# Tic-Tac-Toe
def print_game(game_state):  # print game state
    start_end_line = '---------'
    example_line = ['|', '_', '_', '_', '|']
    char_list = list(game_state)
    i = 0
    j = 1
    print(start_end_line)
    while i < 9:
        if j < 4:
            example_line[j] = char_list[i]
            j += 1
        if j == 4:
            print(" ".join(example_line))
            j = 1
        i += 1
    print(start_end_line)


def check_line(gsm, p):  # Check if p sign wins in line / gsm : game state matrix
    for i in range(3):
        j = 0
        if gsm[i][j] == gsm[i][j + 1] == gsm[i][j + 2] == p:
            return True


def check_column(gsm, p):  # Check if p sign wins in column / gsm : game state matrix
    for j in range(3):
        i = 0
        if gsm[i][j] == gsm[i + 1][j] == gsm[i + 2][j] == p:
            return True


def check_diagonal(gsm, p):  # Check if p sign wins in diagonal / gsm : game state matrix
    if gsm[0][0] == gsm[1][1] == gsm[2][2] == p or gsm[2][0] == gsm[1][1] == gsm[0][2] == p:
        return True


def get_winners(gsm, p, o):  # Check if player/opponent sign wins in line, column, diagonal / gsm : game state matrix
    winners = ''
    if check_line(gsm, p) or check_column(gsm, p) or check_diagonal(gsm, p):
        winners += p
    if check_line(gsm, o) or check_column(gsm, o) or check_diagonal(gsm, o):
        winners += o
    return winners


def check_win(game_state, x='X', o='O'):  # Check and return game result
    # turn input into matrix
    char_list = list(game_state)
    matrix = [[], [], []]
    k = 0
    i = 0
    while i < len(char_list):
        matrix[k].append(char_list[i])
        i += 1
        if i % 3 == 0:
            k += 1
    # check who win and return result
    winners = get_winners(matrix, x, o)
    if abs(game_state.count('X') - game_state.count('O')) > 1:
        return 'Impossible'
    elif '_' in game_state:
        if x in winners and o in winners:
            return 'Impossible'
        elif x in winners:
            return 'X wins'
        elif o in winners:
            return 'O wins'
        else:
            return 'Game not finished'
    else:
        if x not in winners and o not in winners:
            return 'Draw'
        if x in winners and o in winners:
            return 'Impossible'
        elif x in winners:
            return 'X wins'
        elif o in winners:
            return 'O wins'


def use_coordinates(game_state, coordinates, p):  # check if coordinates are good and return the new matrix as string
    coordinates_dict = {'13': 0, '23': 1, '33': 2, '12': 3, '22': 4, '32': 5, '11': 6, '21': 7, '31': 8}
    char_list = list(game_state)
    if not (coordinates[0].isnumeric() and coordinates[1].isnumeric()):
        print('You should enter numbers!')
    elif not (0 <= int(coordinates[0]) <= 3 and 0 <= int(coordinates[1]) <= 3):
        print('Coordinates should be from 1 to 3!')
    elif not(char_list[int(coordinates_dict[''.join(coordinates)])] == '_'):
        print('This cell is occupied! Choose another one!')
    else:
        char_list[int(coordinates_dict[''.join(coordinates)])] = p
    return ''.join(char_list)


# game matrix initialization
game_matrix = '_________'
print_game(game_matrix)
player_turn = 'X'
while True:  # game loop
    coordinates_input = input('Enter the coordinates:').split()
    new_game_matrix = use_coordinates(game_matrix, coordinates_input, player_turn)
    while new_game_matrix == game_matrix:  # check if game matrix changed or ask again for input if error
        coordinates_input = input('Enter the coordinates:').split()
        new_game_matrix = use_coordinates(game_matrix, coordinates_input, player_turn)
    game_matrix = new_game_matrix
    print_game(game_matrix)
    result = check_win(game_matrix)
    if 'finished' in result:
        print(result)
    else:
        print(result)
        break
    player_turn = 'X' if player_turn == 'O' else 'O'  # change player turn
